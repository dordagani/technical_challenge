---  ## Technical challenge 

## Prepare new volume and instance

- hosts: localhost
  gather_facts: no
  vars_files:
    - aws_keys.yml
  vars:
    BASE_AMI: ami-02eac2c0129f6376b #Centos 7
    AWS_ZONE: us-east-1d
    security_group: webservers_sg
  tasks:
    - name: Get public ip address of Ansible server
      ipify_facts: api_url=http://api.ipify.org

    - name: Get public ip address of Client 
      shell: w -h | awk '{print $3}'
      register: client_public_ip
    - debug: msg={{ client_public_ip.stdout }}
    
    - name: Create new EBS Volume
      ec2_vol:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        ec2_region: "{{ AWS_REGION }}"
        zone: "{{ AWS_ZONE }}"
        volume_size: "1"
        name: web_volume
        device_name: /dev/xvdf
      register: vol_info

    - name: Create .ssh folder
      file:
        path: /home/ansible/.ssh
        state: directory
        owner: ansible
        group: ansible
        mode: 0700

    - name: Generate an OpenSSH keypair with the default values (4096 bits, rsa)
      openssh_keypair:
        path: /home/ansible/.ssh/id_rsa
        owner: ansible
        group: ansible
    
    - name: Create AWS key pair using Ansible's key.
      ec2_key:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        ec2_region: "{{ AWS_REGION }}"
        name: ansible-keypair
        key_material: "{{ lookup('file', '/home/ansible/.ssh/id_rsa.pub') }}"

    - name: Create a security group
      ec2_group:
        name: "{{ security_group }}"
        description: The webservers security group
        region: "{{ AWS_REGION }}"
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        rules:
          - proto: tcp #Allow SSH from Ansible Server
            from_port: 22
            to_port: 22
            cidr_ip: "{{ ipify_public_ip }}/32"
          - proto: tcp #Allow SSH from Client Public IP
            from_port: 22
            to_port: 22
            cidr_ip: "{{ client_public_ip.stdout }}/32"
          - proto: tcp #Allow HTTP from Client Public IP
            from_port: 80
            to_port: 80
            cidr_ip: "{{ client_public_ip.stdout }}/32"
        rules_egress:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0

    - name: Provision instance
      ec2:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        group: "{{ security_group }}"
        ec2_region: "{{ AWS_REGION }}"
        zone: "{{ AWS_ZONE }}"
        instance_type: t2.micro
        keypair: ansible-keypair
        image: '{{ BASE_AMI }}'
        wait: true
        count: 1
        instance_tags:
          EnvName: Test Environment
      register: ec2

    - name: Attach Volume
      ec2_vol:
        aws_access_key: "{{ AWS_ACCESS_KEY_ID }}"
        aws_secret_key: "{{ AWS_SECRET_ACCESS_KEY }}"
        ec2_region: "{{ AWS_REGION }}"
        instance: "{{ ec2.instances[0].id }}"
        id: "{{ vol_info.volume_id }}"
        device_name: /dev/xvdf
        delete_on_termination: no

    - name: add host to inventory
      add_host:
        hostname: '{{ item.public_ip }}'
        groupname: webgroup
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
      loop: '{{ ec2.instances }}'

## Configure Instance

- hosts: webgroup
  gather_facts: no
  remote_user: centos
  become: yes
  tasks:
    - name: Wait for SSH to come up
      wait_for_connection:
        delay: 5
        timeout: 90

    - name: Create new partition
      become: yes
      parted:
        device: /dev/xvdf
        number: 1
        state: present
      register: parted_output

    - name: Format new partition
      become: yes
      filesystem:
        fstype: ext4
        dev: /dev/xvdf1

    - name: Mount web content volume
      become: yes
      mount:
        path: /var/www
        src: /dev/xvdf1
        fstype: ext4
        state: mounted 

    - name: Install Apache & PHP
      yum:
        name:
          - httpd
          - php
        state: latest

    - name: Create the index.php file
      copy:
        dest: "/var/www/html/index.php"
        content: |
         <?php 
  
         // Creating a variable to store the server address 
         $ip_server = $_SERVER['SERVER_ADDR']; 
  
         // Printing the stored address 
         echo "Server private IP Address is: $ip_server :)"; 
  
         ?>
        owner: apache
        group: apache
        mode: 0644

    - name: Enable Apache on System Boot
      service: name=httpd enabled=yes  
    - name: start apache
      service: name=httpd state=started